/*
 * custom styles library
 */
 @import 'media-queries';
 @import 'theme';

 @mixin shadow($box-shadow1, $box-shadow2, $box-shadow3) {
    -webkit-box-shadow: $box-shadow1, $box-shadow2, $box-shadow3;
            box-shadow: $box-shadow1, $box-shadow2, $box-shadow3;
  }
  
@mixin shadow-none($box-shadow-none) {
  -webkit-box-shadow: $box-shadow-none;
          box-shadow: $box-shadow-none;
}

@mixin getShadow {
  @include shadow(
    0 8px 17px 2px rgba(71, 69, 69, 0.023), 
    0 3px 14px 2px rgba(71, 69, 69, 0.023), 
    0 5px 5px -3px rgba(71, 69, 69, 0.023) !important);
}

.main-elevation {
  @include shadow(
    0 8px 17px 2px rgba(71, 69, 69, 0.023), 
    0 3px 14px 2px rgba(71, 69, 69, 0.023), 
    0 5px 5px -3px rgba(71, 69, 69, 0.023) !important);
}

.no-elevation {
  @include shadow-none(none !important);
}

.full-rounded {
  border-radius: 20px !important;
}

.alignX {
  display: flex !important;
  align-items: center !important;
}

@mixin reverse($scale) {
  -moz-transform: $scale;
  -webkit-transform: $scale;
  -o-transform: $scale;
  transform: $scale;
}

.reverseX {
  @include reverse(scaleX(-1));
}

.reverseY {
  @include reverse(scaleY(-1));
}

@mixin aligment($align-items) {
  -webkit-align-items: $align-items;
    -webkit-box-align: $align-items;
        -ms-flex-align: $align-items;
          align-items: $align-items;
}

.pushAside {
    display: flex !important; 
    justify-content: space-between !important;
    margin-left: auto !important;
}

.disabled {
  opacity: .2 !important;
  cursor: inherit !important;
}

.centerMiddle {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  @include aligment(center);
}

* {
  transition: .1s ease-in-out !important;
}

@keyframes animate-arrow-right {
  0% {
    transform:translateX(-20px);
    opacity: 0;
  }
  70%,
  100% {
    transform:translateX(0px);
    opacity: 1;
  }
}

i {
  cursor: pointer;
}

.no-bg {
  background: transparent !important;
}

.initMayus {
  text-transform: initial !important;
}

// custom scrollbars

::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  border-radius: 10px;
}

::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background: #ccc; 
}

::-webkit-scrollbar-thumb:window-inactive {
  background: #ccc; 
}

.checkedTask {
  text-decoration: line-through;
  color: #ccc;
  cursor: inherit;
}

@media #{$mobile}  {
  ::-webkit-scrollbar-thumb {
    display: none; 
  }
}

// button base style
@mixin btnStyle(
    $display,
    $lineHeight,
    $textSize, 
    $bgColor, 
    $textColor,
    $textTransform,
    $pad, 
    $mar, 
    $elevation, 
    $border, 
    $borderRadius,
    $textDecoration) {
        font-size: $textSize;
        background-color: $bgColor;
        color: $textColor;
        text-transform: $textTransform;
        padding: $pad;
        margin: $mar;
        box-shadow: $elevation;
        border: $border;
        border-radius: $borderRadius;
        text-decoration: $textDecoration;
        cursor: pointer;
}

// button hover style
@mixin btnHover( 
    $bgColor, 
    $textColor,
    $border,
    $textDecoration,
    $elevation ) {
        background-color: $bgColor;
        color: $textColor;
        border: $border;
        text-decoration: $textDecoration;
        box-shadow: $elevation;
}

// init share propieties bethweem button types 
@mixin customBtnStyles( $bg, $bor: 1px solid transparent ) {
@include btnStyle(
    $display: inline-block,
    $lineHeight: 40px,
    $textSize: $main_secondary_text,
    $bgColor: $bg,
    $textColor: $secondaryColor,
    $textTransform: initial,
    $pad: 8px 15px,
    $mar: null, 
    $elevation: null, 
    $border: $bor, 
    $borderRadius: $main_border_radius,
    $textDecoration: null);
}

// init share hover propieties bethweem button types 
@mixin customHovertyles( $bg, $bor, $under ) {
@include btnHover( 
    $bgColor: $bg, 
    $textColor: $secondaryColor,
    $border: $bor,
    $textDecoration: $under,
    $elevation: null );
}

// init each button styles by type
@mixin getStylesByType( $type ) {

    $normal: 'normal';
    $outline: 'outline';
    $text: 'text';
    $fab: 'fab';

@if $type == $normal {

    @include customBtnStyles( 
        $bg: $primaryColor, 
        $bor: 1px solid transparent );

    } @else if $type == $outline {

        @include customBtnStyles( 
            $bg: transparent, 
            $bor: 1px solid $primaryColor );

    } @else if $type == $text {

        @include customBtnStyles( 
            $bg: transparent, 
            $bor: null );

    } @else if $type == $fab {

        @include customBtnStyles( 
            $bg: $whiteColor, 
            $bor: null );

    } @else {
        @error "Unknown type #{$type}.";
    }
}

.btn-icon {
  font-size: 17px;
  transform: translateY(3px);
  margin-right: 8px
}

// set styles to each button class
.btnNormal {
    @include getStylesByType('normal');
    &:hover {
        @include customHovertyles( 
            $bg: $primaryLightColor, 
            $bor: null,
            $under: null);
    }
}

.btnOutline {
    @include getStylesByType('outline');
    &:hover {
        @include customHovertyles( 
            $bg: $primaryColor, 
            $bor: 1px solid $primaryColor,
            $under: null);
    }
}

.btnText {
    @include getStylesByType('text');
    border: none;
    &:hover {
        @include customHovertyles( 
            $bg: null,
            $bor: null,
            $under: underline !important);
    }
}

.btnFAB {
    @include getStylesByType('fab');
    border-radius: 50px;
    padding: 5px;
    line-height: 0;
    box-shadow: 0 8px 17px 2px rgba(71, 69, 69, 0.023), 
                0 3px 14px 2px rgba(71, 69, 69, 0.023),
                0 5px 5px -3px rgba(71, 69, 69, 0.023) !important;
    &:hover {
        @include customHovertyles( 
            $bg: $primaryColor,
            $bor: null,
            $under: null);
    }
}

// Checkboxes

[type="checkbox"]{
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

[type="checkbox"]:not(:checked),
[type="checkbox"]:checked {
  position: absolute;
  opacity: 0;
  pointer-events: none;
}


[type="checkbox"] + span:not(.lever) {
  position: relative;
  padding-left: 35px;
  cursor: pointer;
  display: inline-block;
  height: 13px;
  line-height: 13px;
  font-size: 1rem;
  -webkit-user-select: none;
  -moz-user-select: none;
    -ms-user-select: none;
        user-select: none;
}

[type="checkbox"] + span:not(.lever):before,
[type="checkbox"]:not(.baseCheckbox) + span:not(.lever):after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 18px;
  height: 18px;
  z-index: 0;
  border: 2px solid #ccc;
  border-radius: 1px;
  margin-top: 3px;
  -webkit-transition: .2s;
  transition: .2s;
}

[type="checkbox"]:not(.baseCheckbox) + span:not(.lever):after {
  border: 0;
  -webkit-transform: scale(0);
        transform: scale(0);
}

[type="checkbox"]:not(:checked):disabled + span:not(.lever):before {
  border: none;
  background-color: rgba(0, 0, 0, 0.42);
}

[type="checkbox"].tabbed:focus + span:not(.lever):after {
  -webkit-transform: scale(1);
        transform: scale(1);
  border: 0;
  border-radius: 50%;
  -webkit-box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);
        box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);
  background-color: rgba(0, 0, 0, 0.1);
}

[type="checkbox"]:checked + span:not(.lever):before {
  top: -4px;
  left: -5px;
  width: 12px;
  height: 22px;
  border-top: 2px solid transparent;
  border-left: 2px solid transparent;
  border-right: 2px solid #26a69a;
  border-bottom: 2px solid #26a69a;
  -webkit-transform: rotate(40deg);
        transform: rotate(40deg);
  -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
  -webkit-transform-origin: 100% 100%;
        transform-origin: 100% 100%;
}

[type="checkbox"]:checked:disabled + span:before {
  border-right: 2px solid rgba(0, 0, 0, 0.42);
  border-bottom: 2px solid rgba(0, 0, 0, 0.42);
}

/* Indeterminate checkbox */
[type="checkbox"]:indeterminate + span:not(.lever):before {
  top: -11px;
  left: -12px;
  width: 10px;
  height: 22px;
  border-top: none;
  border-left: none;
  border-right: 2px solid #26a69a;
  border-bottom: none;
  -webkit-transform: rotate(90deg);
        transform: rotate(90deg);
  -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
  -webkit-transform-origin: 100% 100%;
        transform-origin: 100% 100%;
}

[type="checkbox"]:indeterminate:disabled + span:not(.lever):before {
  border-right: 2px solid rgba(0, 0, 0, 0.42);
  background-color: transparent;
}

[type="checkbox"].baseCheckbox + span:not(.lever):after {
  border-radius: 2px;
}

[type="checkbox"].baseCheckbox + span:not(.lever):before,
[type="checkbox"].baseCheckbox + span:not(.lever):after {
  content: '';
  left: 0;
  position: absolute;
  /* .1s delay is for check animation */
  -webkit-transition: border .25s, background-color .25s, width .20s .1s, height .20s .1s, top .20s .1s, left .20s .1s;
  transition: border .25s, background-color .25s, width .20s .1s, height .20s .1s, top .20s .1s, left .20s .1s;
  z-index: 1;
}

[type="checkbox"].baseCheckbox:not(:checked) + span:not(.lever):before {
  width: 0;
  height: 0;
  border: 3px solid transparent;
  left: 6px;
  top: 10px;
  -webkit-transform: rotateZ(37deg);
        transform: rotateZ(37deg);
  -webkit-transform-origin: 100% 100%;
        transform-origin: 100% 100%;
}

[type="checkbox"].baseCheckbox:not(:checked) + span:not(.lever):after {
  height: 20px;
  width: 20px;
  background-color: transparent;
  border: 2px solid #5a5a5a;
  top: 0px;
  z-index: 0;
}

[type="checkbox"].baseCheckbox:checked + span:not(.lever):before {
  top: 0;
  left: 1px;
  width: 8px;
  height: 13px;
  border-top: 2px solid transparent;
  border-left: 2px solid transparent;
  border-right: 2px solid #fff;
  border-bottom: 2px solid #fff;
  -webkit-transform: rotateZ(37deg);
        transform: rotateZ(37deg);
  -webkit-transform-origin: 100% 100%;
        transform-origin: 100% 100%;
}

[type="checkbox"].baseCheckbox:checked + span:not(.lever):after {
  top: 0;
  width: 20px;
  height: 20px;
  border: 2px solid #26a69a;
  background-color: #26a69a;
  z-index: 0;
}

[type="checkbox"].baseCheckbox.tabbed:focus + span:not(.lever):after {
  border-radius: 2px;
  border-color: #5a5a5a;
  background-color: rgba(0, 0, 0, 0.1);
}

[type="checkbox"].baseCheckbox.tabbed:checked:focus + span:not(.lever):after {
  border-radius: 2px;
  background-color: #26a69a;
  border-color: #26a69a;
}

[type="checkbox"].baseCheckbox:disabled:not(:checked) + span:not(.lever):before {
  background-color: transparent;
  border: 2px solid transparent;
}

[type="checkbox"].baseCheckbox:disabled:not(:checked) + span:not(.lever):after {
  border-color: transparent;
  background-color: #949494;
}

[type="checkbox"].baseCheckbox:disabled:checked + span:not(.lever):before {
  background-color: transparent;
}

[type="checkbox"].baseCheckbox:disabled:checked + span:not(.lever):after {
  background-color: #949494;
  border-color: #949494;
}

// Media Queries

@media #{$mobile} {
  // set styles to each button class
  .btnNormal {
    @include getStylesByType('normal');
    &:hover {
        &:focus,
        &:active {
          background-color: $primaryColor
        }
    }
  }

  .btnOutline {
    @include getStylesByType('outline');
    &:hover {
      &:focus,
      &:active {
        background-color: transparent;
      }
    }
  }

  .btnText {
    @include getStylesByType('text');
    &:hover {
        @include customHovertyles( 
            $bg: null,
            $bor: null,
            $under: null);
    }
  }

  .btnFAB {
    @include getStylesByType('fab');
    border: none;
    border-radius: 50px;
    padding: 1px;
    margin-bottom: 5px;
    box-shadow: none !important;
    &:hover {
      &:focus,
      &:active {
        background-color: transparent;
      }
    }

    .btn-icon {
      font-size: 20px;
      margin: 0;
      padding: 10px;
    }
  }
}